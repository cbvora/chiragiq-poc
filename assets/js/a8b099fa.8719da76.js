"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[1279],{2243:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"library-docs/validation","title":"Validate Field and type","description":"The validateRequiredFields function ensures that an object contains all necessary fields with the expected data types before initializing a chart object.","source":"@site/docs/library-docs/validation.md","sourceDirName":"library-docs","slug":"/library-docs/validation","permalink":"/chiragiq-poc/docs/library-docs/validation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"EventManager Utility","permalink":"/chiragiq-poc/docs/library-docs/event-manager"},"next":{"title":"Core JavaScript SDK","permalink":"/chiragiq-poc/docs/library-docs/chiragiq-main-class"}}');var r=n(4848),a=n(8453);const s={sidebar_position:5},o="Validate Field and type",l={},c=[{value:"Usage",id:"usage",level:3},{value:"Required Fields for Chart Initialization",id:"required-fields-for-chart-initialization",level:4},{value:"Example Implementation",id:"example-implementation",level:4},{value:"Example Error Messages",id:"example-error-messages",level:3}];function d(e){const i={code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"validate-field-and-type",children:"Validate Field and type"})}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"validateRequiredFields"})," function ensures that an object contains all necessary fields with the expected data types before initializing a chart object."]}),"\n",(0,r.jsx)(i.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(i.p,{children:"Before initializing a chart object, we need to ensure that certain required fields are present and of the correct type."}),"\n",(0,r.jsx)(i.h4,{id:"required-fields-for-chart-initialization",children:"Required Fields for Chart Initialization"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'export const chiragIQinitRequiredFields = {\n    container: "string",\n    symbol: "string",\n    fetchHistoryFn: "function",\n    fetchSymbolFn: "function"\n};\n'})}),"\n",(0,r.jsx)(i.h4,{id:"example-implementation",children:"Example Implementation"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'const chartOptions = {\n    container: "chart-container",\n    symbol: "AAPL",\n    fetchHistoryFn: () => {},\n    fetchSymbolFn: () => {}\n};\n\ntry {\n    validateRequiredFields(chartOptions, chiragIQinitRequiredFields);\n    console.log("All required fields are valid.");\n} catch (error) {\n    console.error(error.message);\n}\n'})}),"\n",(0,r.jsx)(i.h3,{id:"example-error-messages",children:"Example Error Messages"}),"\n",(0,r.jsx)(i.p,{children:"If a required field is missing or has an incorrect type, the function throws an error with a message like:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-text",children:"Invalid properties: The 'container' property is required and must be a string. The 'fetchHistoryFn' property is required and must be a function.\n"})}),"\n",(0,r.jsxs)(i.p,{children:["This utility is also ",(0,r.jsx)(i.strong,{children:"exposed to the consumer side"}),", allowing them to validate any data"]})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>o});var t=n(6540);const r={},a=t.createContext(r);function s(e){const i=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:i},e.children)}}}]);